<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="Extract_fbx" label="Extract FBX" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[import hou


def return_null_children():
    """RETURN A LIST WITH ALL MERGEABLE NODES"""
    nodesList = []
    for node in hou.selectedNodes():  
        childrens = node.allSubChildren()
        if len(childrens) > 0:
            for child in childrens:
                if child.type().name() == "geo":
                    for newChild in child.allSubChildren():
                        if not len(newChild.outputs()):
                            if newChild.type().name() != "subnet":    
                                nodesList.append(newChild)
                              
    return nodesList

    
def create_merge(objects_to_merge):
    """CREATE A MERGE NODE WITH ALL THE OUPUT FROM FBX"""
    num = len(objects_to_merge)
    name = hou.selectedNodes()[0]
    name = name.name()
    merge_node = hou.node("/obj").createNode("geo" , name + "_merge")
    
    merge = merge_node.createNode("object_merge" , name + "_merge")
    merge.parm("numobj").set(num)
    merge.parm("xformpath").set(".")
    
    for i in range(1 , num+1):
        path = objects_to_merge[i-1].path()
        merge.parm('objpath%d' %i).set(path)
                              

    
create_merge(return_null_children())

]]></script>
  </tool>

  <tool name="save" label="SAVE NEW" icon="SOP_heightfield_file">
    <script scriptType="python"><![CDATA[import importlib

from file_scripts import save_file_ui as main
importlib.reload(main)

main.run_app()]]></script>
  </tool>

  <tool name="openFile" label="OPEN" icon="OBJ_fetch">
    <helpText><![CDATA[This load a Qt menu that allows you to pick any scene in a shot inside of the project.

Double click the scene you want to open, and then press the Open button.]]></helpText>
    <script scriptType="python"><![CDATA[import importlib
import hou
from PySide2.QtWidgets import QMessageBox

from file_scripts import files_handling as f
importlib.reload(f)

from file_scripts import files_handling_ui as f_ui
importlib.reload(f_ui)

if not hou.hipFile.hasUnsavedChanges():
    f_ui.show_files()
else: 
    msgBoxSave = QMessageBox()
    msgBoxSave.setText("The file contained unsaved changes.")
    msgBoxSave.setWindowTitle("Save First")
    msgBoxSave.setDetailedText("Save any modification made using Ctrl + S, or ignore and save anyway")
    msgBoxSave.setIcon(QMessageBox.Warning)
    msgBoxSave.setStandardButtons(QMessageBox.Ok | QMessageBox.Ignore)
    result = msgBoxSave.exec_()
    
    print ("RESULT")
    print(result)
    print(QMessageBox.StandardButton.Ignore)
    
    if result == 1048576:
        f_ui.show_files()

]]></script>
  </tool>

  <tool name="up_version" label="UP Version" icon="VOP_add">
    <script scriptType="python"><![CDATA[import importlib
import hou

from file_scripts import files_handling as fh
importlib.reload(fh)

from file_scripts import incremental_save as inc
importlib.reload(inc)

file_path = hou.hipFile.name()

inc.houdini_version_up(file_path)
]]></script>
  </tool>

  <tool name="MantraControls" label="Mantra Ctrl" icon="ROP_mantra">
    <script scriptType="python"><![CDATA[import importlib


from qtDialogs import Rop_controls as r
importlib.reload(r)


r.run_app()
]]></script>
  </tool>

  <tool name="batcher" label="Batcher" icon="ROP_batch">
    <script scriptType="python"><![CDATA[import hou

selection = hou.ui.readMultiInput("Select the CFX Geometry", ["Creature Name"], buttons=("OK", "Cancel"))

if selection[0] == 0:
    geoCreate = hou.node("/obj").createNode("geo", selection[1][0])
    geoCreate.createNode("RBD_Rigg::01", "test")]]></script>
  </tool>

  <toolshelf name="pipeline" label="pipeline">
    <memberTool name="save"/>
    <memberTool name="openFile"/>
    <memberTool name="up_version"/>
    <memberTool name="Extract_fbx"/>
    <memberTool name="MantraControls"/>
    <memberTool name="batcher"/>
    <memberTool name="hda_publisher"/>
    <memberTool name="frameRange"/>
    <memberTool name="dependent"/>
    <memberTool name="cp_parameters"/>
    <memberTool name="compareParms"/>
    <memberTool name="userProperties"/>
  </toolshelf>

  <tool name="viewportReset" label="Viewport Reset" icon="OBJ_viewportisolator">
    <script scriptType="python"><![CDATA[import hou

def update_scene_view():
    panes = hou.ui.panes()
    scene_viewer = None
    scene_viewer_pane = None
    
    
    
    for pane in panes:
        for tab in pane.tabs():            
            if tab.type() == hou.paneTabType.SceneViewer:
                scene_viewer = tab
                scene_viewer_pane = pane
                
    old_perspective = scene_viewer.viewports()[-1]
    old_settings = old_perspective.settings()
    old_color = old_settings.colorScheme()
    
    old_display_set = old_settings.displaySet(hou.displaySetType.DisplayModel)
    
    print(old_display_set.displaySetType())
    
    
    if scene_viewer:
        
        scene_viewer.close()
    else:
        
        hou.ui.displayMessage("No Scene View present")
        
    if scene_viewer_pane:
        
        new_view = scene_viewer_pane.createTab(hou.paneTabType.SceneViewer) 
        perspective = new_view.viewports()[-1]
        settings = perspective.settings()
        settings.setColorScheme(old_color)      

    
update_scene_view()]]></script>
  </tool>
</shelfDocument>
