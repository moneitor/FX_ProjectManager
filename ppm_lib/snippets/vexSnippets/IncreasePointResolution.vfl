// USE A DETAIL WRANGLE

float radius = chf("radius");
int maxpt = chi("max_pt");
float mindist = chf("min_distance");

int npts = npoints(0);
string ptattribs[] = detailintrinsic(0, "pointattributes");

for (int i = 0; i < npts; i++) {
    vector mypos = point(0, "P", i);

    int pts[] = pcfind(0, "P", mypos, radius, maxpt);
    removeindex(pts, 0);
    
    
    
    for (int j = 0; j < len(pts); j++) {
        vector fpos = point(0, "P", pts[j]);
        vector dir = fpos - mypos;
        vector newpos = mypos + (dir * 0.5);
        
        if (length(dir) > mindist){
            int newpt = addpoint(0, newpos);
            
            foreach(string att; ptattribs){
                int attType = pointattribtype(0, att);
                if (attType != -1) {
                    if (attType == 0){
                        int getatt0 = point(0, att, i);
                        int getatt1 = point(0, att, pts[j]);
                        
                        setpointattrib(0, att, newpt, max(getatt0, getatt1));
                    }
                    if (attType == 1) {
                        int attsize = attribsize(0, "point", att);
                        if (attsize == 1){
                            float getatt0 = point(0, att, i);
                            float getatt1 = point(0, att, pts[j]);
                            float newatt = (getatt0 + getatt1) / 2;
                            setpointattrib(0, att, newpt, newatt);
                        }
                        if (attsize > 1) {
                            vector getatt0 = point(0, att, i);
                            vector getatt1 = point(0, att, pts[j]);
                            vector newatt = (getatt0 + getatt1)/2;
                            setpointattrib(0, att, newpt, newatt);
                        }
                    }
                }
                if (attType == 2) {
                    string getatt = point(0, att, pts[j]);
                    setpointattrib(0, att, newpt, getatt);
                }
            }
        }
        
    }
    
}
